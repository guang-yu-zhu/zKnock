% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat.glmnet.R
\name{stat.glmnet_lambdasmax}
\alias{stat.glmnet_lambdasmax}
\title{GLM statistics for knockoff}
\usage{
stat.glmnet_lambdasmax(X, X_k, y, family = "gaussian", ...)
}
\arguments{
\item{X}{n-by-p matrix of original variables.}

\item{X_k}{n-by-p matrix of knockoff variables.}

\item{y}{Response variable vector of length n.
Quantitative for family = "gaussian" or "poisson".
\itemize{
\item For family = "binomial", y should be either:
\itemize{
\item a two-level factor,
\item a two-column matrix of counts, or
\item proportions.
}
\item For family = "multinomial", y can be a factor with at least two levels or a matrix.
\item For family = "cox", y should be a two-column matrix with 'time' and 'status'.
\item For family = "mgaussian", y is a matrix of quantitative responses.
}}

\item{family}{response type (see above).}

\item{...}{additional arguments specific to \code{glmnet} (see Details).}
}
\value{
A vector of statistics \eqn{W} of length p.
}
\description{
Computes the signed maximum statistic
\deqn{W_j = \max(Z_j, \tilde{Z}_j) \cdot \mathrm{sgn}(Z_j - \tilde{Z}_j),}
where \eqn{Z_j} and \eqn{\tilde{Z}_j} are the maximum values of
\eqn{\lambda} at which the jth variable and its knockoff, respectively,
enter the generalized linear model.
}
\details{
This function uses \code{glmnet} to compute the regularization path
on a fine grid of \eqn{\lambda}'s.

The additional \code{nlambda}
parameter can be used to control the granularity of the grid of \eqn{\lambda} values.
The default value of \code{nlambda} is \code{500}.

If the family is 'binomial' and a lambda sequence is not provided by the user,
this function generates it on a log-linear scale before calling 'glmnet'.

For a complete list of the available additional arguments, see \code{\link[glmnet:glmnet]{glmnet::glmnet()}}.
}
\examples{
set.seed(2024)
n=80; p=100; k=10; Ac = 1:k; Ic = (k+1):p
X = generate_X(n=n,p=p)
y <- generate_y(X, p_nn=k, a=3)
Xk = create.shrink_Gaussian(X = X, n_ko = 10)
res1 = knockoff.filter(X, y, Xk, statistic = stat.glmnet_lambdasmax,
                       offset = 1, fdr = 0.1)
res1
perf_eval(res1$shat,Ac,Ic)

}
